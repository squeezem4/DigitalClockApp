@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (F)</th>
                <th>Apparent Temp. (F)</th>
                <th>Day</th>
                <th>Rain</th>
                <th>Showers</th>
                <th>Snowfall</th>
                <th>Precipataion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.ApparentTemperature</td>
                    <td>@forecast.isDay</td>
                    <td>@forecast.Rain</td>
                    <td>@forecast.Showers</td>
                    <td>@forecast.Snowfall</td>
                    <td>@forecast.Precipataion</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://api.open-meteo.com/v1/forecast?latitude=43.39&longitude=70.15&current=temperature_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall&wind_speed_unit=mph&temperature_unit=fahrenheit&precipitation_unit=inch");
    }

    public class WeatherForecast
    {
        public int temperature_2m { get; set; }

        public int apparent_temperature { get; set; }

        public bool is_day { get; set; }

        public int precipataion { get; set; }

        public int rain { get; set; }

        public bool showers { get; set; }

        public int snowfall { get; set; }

    }
}
